/** Declaration file generated by dts-gen */

export class Asset {
    constructor(key: any, parent: any, config: any);

    alias(alias: any, callback: any): any;

    copy(destAsset: any, callback: any): any;

    download(filename: any): any;

    entryUrl(): any;

    fetch(url: any, callback: any): any;

    fop(config: any): any;

    md2html(opts: any, callback: any): any;

    move(destAsset: any, callback: any): any;

    qrcode(opts: any, callback: any): any;

    remove(callback: any): any;

    stat(callback: any): any;

    token(opts: any): any;

    url(): any;

}

export class Batch {
    constructor(_config: any);

    copy(src: any, dest: any): any;

    exec(callback: any): any;

    move(src: any, dest: any): any;

    remove(asset: any): any;

    stat(asset: any): any;

}

export class Bucket {
    constructor(bucketName: any, config: any);

    createGetStream(key: any): any;

    createPutStream(key: any, options: any): any;

    getFile(key: any, callback: any): any;

    image(key: any): any;

    key(key: any): any;

    putFile(key: any, pathname: any, options: any, callback: any, ...args: any[]): any;

    token(opts: any): any;

    url(): any;

}

export class Image {
    constructor(key: any, parent: any, _config: any, ...args: any[]);

    exif(callback: any): any;

    imageInfo(callback: any): any;

    imageMogr(opts: any, callback: any): any;

    imageView(opts: any, callback: any): any;

    watermark(opts: any, callback: any): any;

}

export const version: string;

export function batch(config: any): any;

export function bucket(bucket: any): any;

export function config(key: any, value: any, ...args: any[]): any;

export function genToken(type: any, opts: any): any;

export function get(key: any): any;

export function set(key: any, value: any): any;

export namespace Bucket {
    class Asset {
        constructor(key: any, parent: any, config: any);

        alias(alias: any, callback: any): any;

        copy(destAsset: any, callback: any): any;

        download(filename: any): any;

        entryUrl(): any;

        fetch(url: any, callback: any): any;

        fop(config: any): any;

        md2html(opts: any, callback: any): any;

        move(destAsset: any, callback: any): any;

        qrcode(opts: any, callback: any): any;

        remove(callback: any): any;

        stat(callback: any): any;

        token(opts: any): any;

        url(): any;

    }

    class Image {
        constructor(key: any, parent: any, _config: any, ...args: any[]);

        exif(callback: any): any;

        imageInfo(callback: any): any;

        imageMogr(opts: any, callback: any): any;

        imageView(opts: any, callback: any): any;

        watermark(opts: any, callback: any): any;

    }

}

export namespace Token {
    class AccessToken {
        constructor();

        token(path: any, body: any): any;

    }

    class GetPolicy {
        constructor(opts: any);

        token(domain: any, key: any, opts: any): any;

    }

    class PutPolicy {
        constructor(opts: any);

        token(): any;

    }

}

